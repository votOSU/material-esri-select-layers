import { Component, ElementRef, EventEmitter, Input, OnChanges, OnInit, Output, ViewChild } from '@angular/core';
import { loadModules } from 'esri-loader';
import esri = __esri;

@Component({
  selector: 'app-map',
  templateUrl: './map.component.html',
  styleUrls: ['./map.component.scss']
})

export class MapComponent implements OnInit, OnChanges {

    public featureInfo: string;
    public selectedName: string;
    public testingInfo: string;
    public tinyNum: number;
    public smallNum: number;
    public mediumNum: number;
    public largeNum: number;
    public behemothNum: number;

    @Output() public infoToSend = new EventEmitter<number>(); 
    @Output() public infoToSend2 = new EventEmitter<number>(); 
    @Output() public infoToSend3 = new EventEmitter<number>(); 
    @Output() public infoToSend4 = new EventEmitter<number>(); 
    @Output() public infoToSend5 = new EventEmitter<number>(); 

  esriLoaderOptions: object = {};
  mapView: esri.MapView;
  mapViewProperties: esri.MapViewProperties;
  webMap: esri.WebMap;
  
  webMapPortalId = '8dda0e7b5e2d4fafa80132d59122268c';
  webMapProperties: esri.WebMapProperties;

  @Input()
  featureLayerUrl: string;

  @Output()
  mapLoaded = new EventEmitter<boolean>();

  @ViewChild('mapViewNode', { static: false })
  private mapViewNodeElementRef: ElementRef;

  constructor() {
    this.esriLoaderOptions = {
      url: 'https://js.arcgis.com/4.12/',
      css: true
    };
    loadModules([
      'esri/WebMap',
      'esri/geometry/SpatialReference',
    ], this.esriLoaderOptions)
      .then(([
        WebMap
      ]) => {
        this.webMapProperties = {
            basemap: "gray-vector"
        };
        this.webMap = new WebMap(this.webMapProperties);
      });
  }

  ngOnInit() {
    this.createMapView();
  }

  ngOnChanges() {
    this.changeMapLayer();
  }

  createMapView() {
    loadModules([
      'esri/views/MapView'
    ], this.esriLoaderOptions)
      .then(([
        MapView
      ]) => {
        this.mapViewProperties = {
          container: this.mapViewNodeElementRef.nativeElement,
          center:[-66.12, 18.33],
          zoom: 8,
          map: this.webMap
        };
        this.mapView = new MapView(this.mapViewProperties);
        this.mapView.when(() => {
          // All the resources in the MapView and the map have loaded. Now execute additional processes
          this.mapLoaded.emit(true);
        }, err => {
          console.error(err);
        });
      })
      .catch(err => {
        console.error(err);
      });
  }

  changeMapLayer()
  {
    loadModules([
      'esri/layers/FeatureLayer',
      'esri/request'
    ], this.esriLoaderOptions)
      .then(([
        FeatureLayer, esriRequest
      ]) => {
        if (this.featureLayerUrl)
        {
          let queryOptions = {
            responseType: "json",
            query:{
              f: "json",
              where: "OBJECTID > 0",
              outFields: "*",
              returnGeometry: false
            }
          }
          esriRequest(this.featureLayerUrl+"/query", queryOptions).then(response =>{
            //this.selectedName = response.data.features[0].attributes.state_name
            //console.log(response.data);
            //this.infoToSend.emit(this.selectedName);
            //console.log("Name: "+this.selectedName);
            //let someArray :number [];
            let someArray: Array<number> = [];
            for(let i = 0; i< 5; i++)
            {
              someArray.push(response.data.features[i].attributes.obligated_amt);
              //someArray.sort();
              //console.log("Name: "+ response.data.features[i].attributes.region_name +" = $"+response.data.features[i].attributes.obligated_amt)
              //console.log("$: "+ response.data.features[i].attributes.obligated_amt )
            }
            someArray.sort((n1,n2) => n1-n2);
            this.tinyNum = someArray[0];
            this.smallNum = someArray[1];
            this.mediumNum = someArray[2];
            this.largeNum = someArray[3];
            this.behemothNum = someArray[4];
            this.infoToSend.emit(someArray[0]);
            this.infoToSend2.emit(someArray[1]);
            this.infoToSend3.emit(someArray[2]);
            this.infoToSend4.emit(someArray[3]);
            this.infoToSend5.emit(someArray[4]);
            for(let i = 0; i< someArray.length; i++)
            {
              console.log("$: "+ someArray[i] )
              //this.infoToSend.emit(someArray[i])
            }
            //console.log("Name: "+ response.data.features[0].attributes.region_name )
            //console.log("Name: "+ response.data.features[1].attributes.region_name )
            //console.log("Name: "+ response.data.features[2].attributes.region_name )
            //console.log("Name: "+ response.data.features[3].attributes.region_name )
            //console.log("Name: "+ response.data.features[4].attributes.region_name )
          })
          console.log("LEGEND "+this.tinyNum);
          const lightestColor = {
            type: "simple-fill", // autocasts as new SimpleFillSymbol()
            color: "#fffcd4",
            style: "solid",
            outline: {
              width: 1,
              color: [0, 0, 0]
            }
          };

          const lightColor = {
            type: "simple-fill", // autocasts as new SimpleFillSymbol()
            color: "#b1cdc2",
            style: "solid",
            outline: {
              width: 1,
              color: [0, 0, 0]
            }
          };

          const mediumColor = {
            type: "simple-fill", // autocasts as new SimpleFillSymbol()
            color: "#38627a",
            style: "solid",
            outline: {
              width: 1,
              color: [0, 0, 0]
            }
          };

          const darkColor = {
            type: "simple-fill", // autocasts as new SimpleFillSymbol()
            color: "#0d2644",
            style: "solid",
            outline: {
              width: 1,
              color: [0, 0, 0]
            }
          };
          const renderer = {
            type: "class-breaks", 
            field: "obligated_amt",
           
            defaultSymbol: {
              type: "simple-fill", 
              color: "black",
              style: "cross",
              outline: {
                width: 0.5,
                color: [50, 50, 50, 0.6]
              }
            },
            defaultLabel: "No Data Available",
            classBreakInfos: [
              {
                minValue: 113845,
                maxValue: 113845,
                symbol: lightestColor,
                
              },  
              {
                minValue: 639169,
                maxValue: 639169,
                symbol: lightColor,
                
              },
              {
                minValue: 1327896,
                maxValue: 1327896,
                symbol: mediumColor,
                
              },
              {
                minValue: 2178178,
                maxValue: 2178178,
                symbol: darkColor,
                
              },
              {
                minValue: 2324680,
                maxValue: 2324680,
                symbol: darkColor,
                
              }
            ]
          };
            const featureLayer = new FeatureLayer({
              url: this.featureLayerUrl,
              outFields: ["*"],
              renderer: renderer
            });
          //this.mapView.map.basemap.baseLayers.forEach((baseLayer) => {
            //baseLayer.visible = false;
          //})
            this.mapView.map.removeAll();
            this.mapView.map.add(featureLayer);

            this.mapView.on("layerview-create", function(event){
              //this.queryObject1(featureLayer);
            });
            
        } else {
          if (this.mapView && this.mapView.map) {
            this.mapView.map.removeAll();
          }
        }
      })
      .catch(err => {
        console.error(err);
      });
  }

    queryObject1(featureLayer) {
        var fAttribute
        var query = featureLayer.createQuery();
        query.where = "objectid = 1"; //should be Minnesota or Hawaii if selected Historic Places -> Historic Areas with a year checked. 
        query.outFields = ["*"];
        featureLayer.queryFeatures(query).then(function (response) {
            fAttribute = response.features;
            console.log("Queried Name: " + fAttribute[0].attributes.state_name); //should be Minnesota or Hawaii if selected Historic Places -> Historic Areas with a year checked. 
            this.selectedName = fAttribute[0].attributes.state_name;
        });
        console.log("State Name: "+this.selectedName);
        this.infoToSend.emit(this.selectedName);
    }

    
    // queryObject1(QueryTask, Query) {
    //   let queryTask = new QueryTask({
    //     url: this.featureLayerUrl
    //   });
    //   let query = new Query();
    //   query.returnGeometry = false;
    //   query.outFields = ["*"];
    //   query.where = "objectid = 1";
    //   queryTask.execute(query).then(response =>{
    //     console.log(response);
    //     //console.log("Name: "+response.features[0].attributes.state_name); 
    //   });

    // }

}


<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="initial-scale=1,maximum-scale=1,user-scalable=no"/>
    <title>Class Break Color Render</title>

    <link
      rel="stylesheet"
      href="https://js.arcgis.com/4.13/esri/themes/light/main.css"
    />
    <script src="https://js.arcgis.com/4.13/"></script>

    <style>
      html,
      body,
      #viewDiv {
        padding: 0;
        margin: 0;
        height: 100%;
        width: 100%;
      }
    </style>

    <script>
		var mapview;
		var esriRESTapi;
		var someArray = [];
		var tinyNum;
		var smallNum;
		var mediumNum;
		var largeNum;
		var behemothNum;
		var rendererProperty; 
		var fLayer; 

		function getRESTinfo(esriRESTapi, FeatureLayer)
		{
			let serviceURL = "https://uatgis.recovery.pr/webgisdev/rest/services/TP_Financial_Branch_Dev/MapServer/3";
			let queryOptions = {
				responseType: "json",
				query:{
				  f: "json",
				  where: "OBJECTID > 0",
				  //where: "OBJECTID IN (7,6,32,34,16)"
				  outFields: "*",
				  returnGeometry: false
				}
			}
			esriRESTapi(serviceURL+"/query", queryOptions).then(response =>{
				//let someArray = [];
				for(let i = 0; i< 5; i++)
				{
				  someArray.push(response.data.features[i].attributes.obligated_amt);
				  //someArray.sort();
				  console.log("Name: "+ response.data.features[i].attributes.region_name +" = $"+response.data.features[i].attributes.obligated_amt)
				  //console.log("$: "+ response.data.features[i].attributes.obligated_amt )
				}
				someArray.sort((n1,n2) => n1-n2);
				tinyNum = someArray[0];
				smallNum = someArray[1];
				mediumNum = someArray[2];
				largeNum = someArray[3];
				behemothNum = someArray[4];
				for(let i =0; i< someArray.length; i++)
				{
					console.log(i+1+": "+someArray[i]);
				}
				const lightestColor = {
					type: "simple-fill", // autocasts as new SimpleFillSymbol()
					color: "#fffcd4",
					style: "solid",
					outline: {
						width: 1,
						color: [255, 255, 255]
					}
				};

				const lightColor = {
				  type: "simple-fill", // autocasts as new SimpleFillSymbol()
				  color: "#b1cdc2",
				  style: "solid",
				  outline: {
					width: 1,
					color: [255, 255, 255]
				  }
				};

				const mediumColor = {
				  type: "simple-fill", // autocasts as new SimpleFillSymbol()
				  color: "#38627a",
				  style: "solid",
				  outline: {
					width: 1,
					color: [255, 255, 255]
				  }
				};

				const darkColor = {
				  type: "simple-fill", // autocasts as new SimpleFillSymbol()
				  color: "#0d2644",
				  style: "solid",
				  outline: {
					width: 1,
					color: [255, 255, 255]
				  }
				};
				const darkestColor = {
				  type: "simple-fill", // autocasts as new SimpleFillSymbol()
				  color: "#010812",
				  style: "solid",
				  outline: {
					width: 1,
					color: [255, 255, 255]
				  }
				};			
					
				renderer =  {
					type: "unique-value", 
					field: "obligated_amt",

					uniqueValueInfos:[
						{
							value: tinyNum,
							symbol: lightestColor
						},
						{
							value: smallNum,
							symbol: lightColor
						},
						{
							value: mediumNum,
							symbol: mediumColor
						},
						{
							value: largeNum,
							symbol: darkColor
						},
						{
							value: behemothNum,
							symbol: darkestColor
						},
					]
				};
				fLayer = new FeatureLayer({
				  url: serviceURL,
				  outFields: ["*"],
				  renderer: renderer
			   
				});
			});
		}
				

      require([
        "esri/Map",
        "esri/views/MapView",
        "esri/layers/FeatureLayer",
        "esri/widgets/Legend",
		'esri/request'
		], function(Map, MapView, FeatureLayer, Legend,esriRequest) {
		esriRESTapi = esriRequest; 
		
		getRESTinfo(esriRESTapi, FeatureLayer);
		//console.log("HELLO" + tinyNum);
		//rendererProperty = uniqueRender(); 


        const map = new Map({
          basemap: "gray-vector",
          //layers: [fLayer]
        });
		
        const view = new MapView({
          container: "viewDiv",
          map: map,
          center:[-66.12, 18.33],
          zoom: 8
        });
		view.when(function(){
			map.add(fLayer);
		})
      
      });
	  
	  

		function uniqueRender(num1, num2, num3, num4, num5)
		{
			//console.log("SMALLEST #: "+num1);
			const lightestColor = {
			  type: "simple-fill", // autocasts as new SimpleFillSymbol()
			  color: "#fffcd4",
			  style: "solid",
			  outline: {
				width: 1,
				color: [255, 255, 255]
			  }
			};

			const lightColor = {
			  type: "simple-fill", // autocasts as new SimpleFillSymbol()
			  color: "#b1cdc2",
			  style: "solid",
			  outline: {
				width: 1,
				color: [255, 255, 255]
			  }
			};

			const mediumColor = {
			  type: "simple-fill", // autocasts as new SimpleFillSymbol()
			  color: "#38627a",
			  style: "solid",
			  outline: {
				width: 1,
				color: [255, 255, 255]
			  }
			};

			const darkColor = {
			  type: "simple-fill", // autocasts as new SimpleFillSymbol()
			  color: "#0d2644",
			  style: "solid",
			  outline: {
				width: 1,
				color: [255, 255, 255]
			  }
			};
			const darkestColor = {
			  type: "simple-fill", // autocasts as new SimpleFillSymbol()
			  color: "#010812",
			  style: "solid",
			  outline: {
				width: 1,
				color: [255, 255, 255]
			  }
			};			
				
			renderer =  {
				type: "unique-value", 
				field: "obligated_amt",
				defaultSymbol: {
					type: "simple-fill", 
					color: "black",
					style: "cross",
					outline: {
						width: 0.5,
						color: [50, 50, 50, 0.6]
					}
				},
				defaultLabel: "No Data Available",
				uniqueValueInfos:[
					{
						value: num1,
						symbol: lightestColor
					},
					{
						value: num2,
						symbol: lightColor
					},
					{
						value: num3,
						symbol: mediumColor
					},
					{
						value: num4,
						symbol: darkColor
					},
					{
						value: num5,
						symbol: darkestColor
					},
				]
			};			
		}
	  
    </script>
  </head>

  <body>
    <div id="viewDiv"></div>
  </body>
</html>




import { Component, ElementRef, EventEmitter, Input, OnChanges, OnInit, Output, ViewChild } from '@angular/core';
import { loadModules } from 'esri-loader';
import esri = __esri;

@Component({
  selector: 'app-map',
  templateUrl: './map.component.html',
  styleUrls: ['./map.component.scss']
})

export class MapComponent implements OnInit, OnChanges {

    public featureInfo: string;
    public selectedName: string;
    public testingInfo: string;
    public tinyNum: number;
    public smallNum: number;
    public mediumNum: number;
    public largeNum: number;
    public behemothNum: number;

    @Output() public infoToSend = new EventEmitter<number>(); 
    @Output() public infoToSend2 = new EventEmitter<number>(); 
    @Output() public infoToSend3 = new EventEmitter<number>(); 
    @Output() public infoToSend4 = new EventEmitter<number>(); 
    @Output() public infoToSend5 = new EventEmitter<number>(); 

  esriLoaderOptions: object = {};
  mapView: esri.MapView;
  mapViewProperties: esri.MapViewProperties;
  webMap: esri.WebMap;
  
  webMapPortalId = '8dda0e7b5e2d4fafa80132d59122268c';
  webMapProperties: esri.WebMapProperties;

  @Input()
  featureLayerUrl: string;

  @Output()
  mapLoaded = new EventEmitter<boolean>();

  @ViewChild('mapViewNode', { static: false })
  private mapViewNodeElementRef: ElementRef;

  constructor() {
    this.esriLoaderOptions = {
      url: 'https://js.arcgis.com/4.12/',
      css: true
    };
    loadModules([
      'esri/WebMap',
      'esri/geometry/SpatialReference',
    ], this.esriLoaderOptions)
      .then(([
        WebMap
      ]) => {
        this.webMapProperties = {
            basemap: "gray-vector"
        };
        this.webMap = new WebMap(this.webMapProperties);
      });
  }

  ngOnInit() {
    this.createMapView();
  }

  ngOnChanges() {
    this.changeMapLayer();
  }

  createMapView() {
    loadModules([
      'esri/views/MapView'
    ], this.esriLoaderOptions)
      .then(([
        MapView
      ]) => {
        this.mapViewProperties = {
          container: this.mapViewNodeElementRef.nativeElement,
          center: [-98.34, 40.28],
          zoom: 4,
          map: this.webMap
        };
        this.mapView = new MapView(this.mapViewProperties);
        this.mapView.when(() => {
          // All the resources in the MapView and the map have loaded. Now execute additional processes
          this.mapLoaded.emit(true);
        }, err => {
          console.error(err);
        });
      })
      .catch(err => {
        console.error(err);
      });
  }

  changeMapLayer()
  {
    loadModules([
      'esri/layers/FeatureLayer',
      'esri/request'
    ], this.esriLoaderOptions)
      .then(([
        FeatureLayer, esriRequest
      ]) => {
        if (this.featureLayerUrl)
        {
          
          const featureLayer = new FeatureLayer({
            url: this.featureLayerUrl,
            outFields: ["*"],
            //renderer: renderer
          });
          let queryOptions = {
            responseType: "json",
            query:{
              f: "json",
              where: "objectid IN (7,6,32,34,16)",
              outFields: "*",
              returnGeometry: false
            }
          }
          esriRequest(this.featureLayerUrl+"/query", queryOptions).then(response =>{
            //this.selectedName = response.data.features[0].attributes.state_name
            //console.log(response.data);
            //this.infoToSend.emit(this.selectedName);
            //console.log("Name: "+this.selectedName);
            //let someArray :number [];
            let someArray: Array<number> = [];
            for(let i = 0; i< 5; i++)
            {
              someArray.push(response.data.features[i].attributes.pop2000);
              console.log(response.data.features[i].attributes.state_name +" Pop: "+response.data.features[i].attributes.pop2000);
              //someArray.sort();
              //console.log("Name: "+ response.data.features[i].attributes.region_name +" = $"+response.data.features[i].attributes.obligated_amt)
              //console.log("$: "+ response.data.features[i].attributes.obligated_amt )
            }
            someArray.sort((n1,n2) => n1-n2);
            this.tinyNum = someArray[0];
            this.smallNum = someArray[1];
            this.mediumNum = someArray[2];
            this.largeNum = someArray[3];
            this.behemothNum = someArray[4];
            this.infoToSend.emit(someArray[0]);
            this.infoToSend2.emit(someArray[1]);
            this.infoToSend3.emit(someArray[2]);
            this.infoToSend4.emit(someArray[3]);
            this.infoToSend5.emit(someArray[4]);
            for(let i = 0; i< someArray.length; i++)
            {
              console.log("$: "+ someArray[i] )
              //this.infoToSend.emit(someArray[i])
            }
            //console.log("Name: "+ response.data.features[0].attributes.region_name )
            //console.log("Name: "+ response.data.features[1].attributes.region_name )
            //console.log("Name: "+ response.data.features[2].attributes.region_name )
            //console.log("Name: "+ response.data.features[3].attributes.region_name )
            //console.log("Name: "+ response.data.features[4].attributes.region_name )
          })

          //this.mapView.map.basemap.baseLayers.forEach((baseLayer) => {
            //baseLayer.visible = false;
          //})
            this.mapView.map.removeAll();
            this.mapView.map.add(featureLayer);

            this.mapView.on("layerview-create", function(event){
              //this.queryObject1(featureLayer);
            });
            
        } else {
          if (this.mapView && this.mapView.map) {
            this.mapView.map.removeAll();
          }
        }
      })
      .catch(err => {
        console.error(err);
      });
  }

    queryObject1(featureLayer) {
        var fAttribute
        var query = featureLayer.createQuery();
        query.where = "objectid = 1"; //should be Minnesota or Hawaii if selected Historic Places -> Historic Areas with a year checked. 
        query.outFields = ["*"];
        featureLayer.queryFeatures(query).then(function (response) {
            fAttribute = response.features;
            console.log("Queried Name: " + fAttribute[0].attributes.state_name); //should be Minnesota or Hawaii if selected Historic Places -> Historic Areas with a year checked. 
            this.selectedName = fAttribute[0].attributes.state_name;
        });
        console.log("State Name: "+this.selectedName);
        //this.infoToSend.emit(this.selectedName);
    }

    
    // queryObject1(QueryTask, Query) {
    //   let queryTask = new QueryTask({
    //     url: this.featureLayerUrl
    //   });
    //   let query = new Query();
    //   query.returnGeometry = false;
    //   query.outFields = ["*"];
    //   query.where = "objectid = 1";
    //   queryTask.execute(query).then(response =>{
    //     console.log(response);
    //     //console.log("Name: "+response.features[0].attributes.state_name); 
    //   });

    // }

}
